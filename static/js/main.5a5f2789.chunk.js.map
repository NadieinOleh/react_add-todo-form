{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","TodoList","todoList","map","getUser","userId","usersFromServer","find","todos","App","useState","inputValue","setInputValue","selectValue","setSelectValue","validationForTitle","setValidationForTitle","validationForSelect","setValidationForSelect","setTodoList","action","method","htmlFor","type","placeholder","value","onChange","event","target","disabled","onClick","preventDefault","nextId","Math","max","newTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a5f2789.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../Types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { Todo } from '../../Types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={`TodoInfo\n        ${completed\n      ? 'TodoInfo--completed'\n      : ''\n    }`}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../Types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todoList: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todoList }) => {\n  return (\n    <section className=\"TodoList\">\n      {todoList.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { User } from './Types/User';\nimport { Todo } from './Types/Todo';\n\nimport './App.scss';\n\nconst getUser = (userId: number): User | null => {\n  const founder = usersFromServer.find(user => user.id === userId);\n\n  return founder || null;\n};\n\nexport const todos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}\n));\n\nexport const App: React.FC = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [selectValue, setSelectValue] = useState(0);\n  const [validationForTitle, setValidationForTitle] = useState(false);\n  const [validationForSelect, setValidationForSelect] = useState(false);\n  const [todoList, setTodoList] = useState<Todo[]>(todos);\n\n  const addTodo = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    if (selectValue === 0 || inputValue === '') {\n      // eslint-disable-next-line no-sequences\n      return setValidationForSelect(true),\n      setValidationForTitle(true);\n    }\n\n    setInputValue('');\n    setSelectValue(0);\n\n    const nextId = Math.max(...todoList.map(todo => todo.id));\n    const user = getUser(selectValue);\n\n    const newTodo = {\n      id: nextId + 1,\n      title: inputValue,\n      completed: false,\n      userId: selectValue,\n      user: user ?? null,\n    };\n\n    return setTodoList([...todoList, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\">\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={inputValue}\n            onChange={event => {\n              setInputValue(event.target.value);\n              setValidationForTitle(false);\n            }}\n          />\n          {validationForTitle && (\n            <span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"userSelect\"\n            value={selectValue}\n            onChange={event => {\n              setSelectValue(+event.target.value);\n              setValidationForSelect(false);\n            }}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n\n            {usersFromServer.map(({ id, name }: User) => (\n              <option\n                value={id}\n                key={id}\n              >\n                {name}\n              </option>\n            ))}\n          </select>\n\n          {validationForSelect && (\n            <span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={addTodo}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todoList={todoList} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}